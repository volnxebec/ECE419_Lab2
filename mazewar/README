Introduction
============
This implements a client-server Mazewar game. 
Additionally, the MSocket class can be used to 
induce errors, such as adding delays and reordering packets.


Architecture
============
The server starts and listens on some port.

When a client contacts the server, the server spawns a 
ServerListenerThread. Server.java defines the MAX_CLIENTS constant 
that determines the maximum number of clients that join.

When the expected number of clients have contacted the 
server, the server spawns a single ServerSenderThreads, that broadcasts 
the name and location of all the clients (this requires that names
must be unique).

When an event happens, it is sent to the server. The server
stamps the event with a global sequence number and broadcasts to all 
hosts.

The client and server communicates using MSockets, and MServerSockets
which are analogous to Sockets and ServerSockets. MSockets are 
constructed by passing a host address and port. MSockets expose two 
main methods, readObject and writeObject to read and write objects, respectively. 

The MSocket can reorder packets and add delays based on 
3 constants defined in MSocket.java, namely DELAY_WEIGHT, DELAY_THRESHOLD, 
UNORDER_FACTOR. Errors are added both on sending and receiveing packets.


Making and Running
==================
To make the project run
make

To run the server:
./server.sh <listening port> <number of players (optional, default=4)>

To run the clients: 
./run.sh <server host> <server port>


Changes to Partial Solution
===========================

1. Consistency when sending packets from client to server (keypress event).
We added a local sequence number for each packet which tracks the event order seen by the local client from the key press.
The local client always sends the packets in correct order indicated by the sequence number, but the server may recive them out of order.
In order to address this issue, we added a buffer to keep these packets in order for each server listener instance.
The packet are kept in the buffer until the correct sequence number packet arrives, then the said packet and next continuous packets are put into the server event queue.
For example, if packets arrive in the buffer in the following order: 1,2,4,5,6,3.  Then 1 and 2 will be sent to the server event queue. 4,5, and 6 will be stored in the buffer until 3 arrives.  Then 3,4,5,6 are sent to the serer event queue.

2. Consistency when sending packets from server to client.
Similar to the above case, the packets can be sent to the client in the wrong order. 
We used the exact same method to reorder the packets in the correct order, but we used the global sequence number instead of the local sequence number.

3. Allowing up to 4 players to play the game.
We modified the shell script as well as the Server.java to take in the number of players as an optional argument (the default is 4).
Note: we cannot change the number of players midgame.

4. Consistency for the direction when client spawns
The original code had a random with no seed for the direction when respawning. This sometimes caused the clients to have different directions after respawning. We fixed this by using a same seed for all direction randomization when respawning to ensure that all clients will face the same direction.

5. Unfixed bugs...
->Direction visual bug. Sometimes the client faces one direction on the GUI but is actually facing another when moving. Though this is consistent between all clients.
->Bullet fire and moving at same time bug. Sometimes when a player repeatedly presses Up, Down, and Fire rapidly, some clients will see different positions for that player.  We concluded that this was due to a client receiving all packets at once and the bullet obstructing the movement of the client.  For example, a client is facing upwards. He fires a projectile, then immediately tries to go Up, but the projectile is blocking the movement of the player.  



